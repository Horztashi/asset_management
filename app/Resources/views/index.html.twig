{% extends 'base.html.twig' %}

{% block body %}
    <div class = "container transparent">
        <div class = "row">
            <div class = "col-md-4">
                <ul class = "list-group">
                    <li class = "list-group-item">
                        <h4 class="list-group-item-heading">Reminders</h4>
                    </li>
                    <li class = "list-group-item">
                        <span class="badge">{{unassignedAssets}}</span>
                        <a href = "{{ path('asset_unassign')}}">Un-assigned Assets</a>
                    </li>
                    <li class = "list-group-item">
                        <span class="badge">{{defectiveAssets}}</span>
                        <a href = "{{ path('status_show', {id:2})}}">Defective Assets</a>
                    </li>
                    <li class = "list-group-item">
                        <span class="badge">{{disposalAssets}}</span>
                        <a href = "{{ path('status_show', {id:3})}}">For disposal</a>
                    </li>
                </ul>
            </div>
            <div class = "col-md-4">
                <ul class = "list-group">
                    <li class = "list-group-item">
                        <h4 class="list-group-item-heading">Movements for this month</h4>
                    </li>
                    <li class = "list-group-item"><span class="badge">{{mNewAssets}}</span>New Assets</li>
                    <li class = "list-group-item"><span class="badge">{{mAssigned}}</span>Changed Custodian</li>
                    <li class = "list-group-item"><span class="badge">{{mStatus}}</span>Changed Status</li>
                </ul>
            </div>
            <div class = "col-md-4">
                <ul class = "list-group">
                    <li class = "list-group-item">
                        <h4 class="list-group-item-heading">Upcoming Maintenance</h4>
                    </li>
                    {% for schedule in upcomingMaintenance%}
                        {% if loop.index < 4 %}
                        <li class = "list-group-item">{{ schedule.title }}<span class ="pull-right">{{schedule.schedule| date('F d, Y')}}</span></li>

                        {% endif %}
                    {% endfor %}
                </ul>
            </div>
        </div>
    </div>

    <div class = "container transparent">
        <div class = "row">
            <div class = "col-md-6"><div class ="border" id="defectivechart_div"></div></div>
            <div class = "col-md-6"><div class ="border" id="criticalchart_div"></div></div>

        </div>
        <div class = "row">
            <div class = "col-md-6"><div class ="border" id="categorychart_div"></div></div>
            <div class = "col-md-6"><div class ="border" id="statuschart_div"></div></div>
        </div>
        <div class = "row">
            <div class = "col-md-6"><div class ="border" id="assignchart_div"></div></div>
        </div>
    </div>
{% endblock %}
{% block javascripts %}
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
      google.charts.load('current', {'packages':['corechart']});
      google.charts.setOnLoadCallback(drawDefectiveChart);
      google.charts.setOnLoadCallback(drawCriticalChart);
      google.charts.setOnLoadCallback(drawCategoryChart);
      google.charts.setOnLoadCallback(drawStatusChart);
      google.charts.setOnLoadCallback(drawAssignChart);

     // Handles the Defective Chart
    function drawDefectiveChart() {
        var defectiveData = new google.visualization.DataTable();
        defectiveData.addColumn('string', 'Assets');
        defectiveData.addColumn('number', 'count');
        defectiveData.addRows([
          ['Not Defective', {{notDefectiveAssets}}],
          ['Defective', {{defectiveAssets}}],
        ]);
        var options = {'title':'Defective Assets vs Non-Defective Percentage'};
        var defectiveChart = new google.visualization.PieChart(document.getElementById('defectivechart_div'));
        defectiveChart.draw(defectiveData, options);
    }

    // Handles the Critical Chart
    function drawCriticalChart() {
        var defectiveData = new google.visualization.DataTable();
        defectiveData.addColumn('string', 'Assets');
        defectiveData.addColumn('number', 'count');
        defectiveData.addRows([
          ['Critical Assets', {{criticalAssets}}],
          ['Non Critical Assets', {{noncriticalAssets}}],
        ]);
        var options = {'title':'Crticial Assets vs Non-Critical Assets Percentage'};
        var defectiveChart = new google.visualization.PieChart(document.getElementById('criticalchart_div'));
        defectiveChart.draw(defectiveData, options);
    }

    // Handles the Category Chart
    function drawCategoryChart() {
        var categoryData = new google.visualization.DataTable();
        categoryData.addColumn('string', 'Category');
        categoryData.addColumn('number', 'count');
        categoryData.addRows([
            {% for category in categoriesArray %}
                ['{{category.name}}', {{category.count}}],
            {% endfor %}
        ]);

        var options = {'title':'Category Percentage'};
        var categoryChart = new google.visualization.PieChart(document.getElementById('categorychart_div'));
        categoryChart.draw(categoryData, options);
    }

    // Handles the Status Chart
    function drawStatusChart() {
        var statusData = new google.visualization.DataTable();
        statusData.addColumn('string', 'Status');
        statusData.addColumn('number', 'count');
        statusData.addRows([
            {% for status in statusesArray %}
                ['{{status.name}}', {{status.count}}],
            {% endfor %}
        ]);

        var options = {'title':'Status Percentage'};
        var statusChart = new google.visualization.PieChart(document.getElementById('statuschart_div'));
        statusChart.draw(statusData, options);
    }

    // Handles the Assign Chart
    function drawAssignChart() {
        var assignData = new google.visualization.DataTable();
        assignData.addColumn('string', 'Status');
        assignData.addColumn('number', 'count');
        assignData.addRows([
          ['Assigned', {{assignedAssets}}],
          ['Unassigned', {{unassignedAssets}}],
        ]);

        var options = {'title':'Assign Percentage'};
        var assignChart = new google.visualization.PieChart(document.getElementById('assignchart_div'));
        assignChart.draw(assignData, options);
    }

    </script>
{% endblock %}
